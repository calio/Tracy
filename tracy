#!/bin/bash
#set -x

output() {
    local prefix=$1
    local func=$2
    local indent=$3

    printf "%s" "$prefix"
    for i in $(seq 1 $indent); do
        printf "|  "
    done
    printf "$func\n"
}

process_file() {
    local file=$1
    local pattern="^#"
    local pattern2="(.*)probe_\w+:(.*):"
    local indent=0

    while read line
    do
        if [[ $line =~ $pattern ]]; then
            continue
        fi

        if [[ $line =~ $pattern2 ]]; then
            local prefix=${BASH_REMATCH[1]}
            local func=${BASH_REMATCH[2]}

            if [[ $line =~ "_return:" ]]; then
                indent=$((indent - 1))
            else
                output "$prefix" "$func" $indent
                indent=$((indent + 1))
            fi
        fi
    done < $file
}

process_file_sketch() {
    local file=$1
    local pattern="^#"
    local pattern2="probe_\w+:(.*):"
    local pattern3="(.*)probe_\w+:(.*):"
    local lines=0
    local indent=0
    declare -A count

    # Pass 1: get function count
    while read line
    do
        if [[ $line =~ $pattern ]]; then
            continue
        fi
        if [[ $line =~ $pattern2 ]]; then
            local func=${BASH_REMATCH[1]}
            count[$func]=$((${count[$func]} + 1))
        fi
        lines=$(($lines + 1))
    done < $file

    local limit=$(($lines / 100))

    # Pass 2: filter out utility functions
    while read line
    do
        if [[ $line =~ $pattern ]]; then
            continue
        fi
        if [[ $line =~ $pattern3 ]]; then
            local prefix=${BASH_REMATCH[1]}
            local func=${BASH_REMATCH[2]}

            if [[ ${count[$func]} -gt $limit ]]; then
                continue
            fi
            if [[ $line =~ "_return:" ]]; then
                indent=$((indent - 1))
            else
                output "$prefix" "$func" $indent
                indent=$((indent + 1))
            fi
        fi
    done < $file
}

tracy_echo() {
    if [[ $VERBOSE == 1 ]]; then
        echo "$@"
    fi
}

usage() {
    cat <<EOF
$0 [options] PROG [args]"

options:    -s Sketch mode, utility function calls will not be shown
            -h Show this help message
            -v Be more verbose
EOF
}

while getopts "shv" opt; do
    case $opt in
        s)
            SKETCH=1
            ;;
        h)
            usage
            exit 0
            ;;
        v)
            VERBOSE=1
            ;;
    esac
done

shift $((OPTIND -1))

if [[ $(whoami) != "root" ]]; then
    echo "Run with root privilege"
    exit 1;
fi

#set -e
BIN=$(which $1)
CAPTURE=$(tempfile)
BASE=$(basename $BIN)

FUNCTIONS=$(perf probe -x $BIN -F|grep -v "@")
PROBES_LIST=$(perf probe -l)

echo "Running..."
tracy_echo "Adding probes..."

for func in $FUNCTIONS; do
    if [[ $PROBES_LIST =~ ":$func" ]]; then
        tracy_echo "$func is already probed"
    else
        tracy_echo "add new probe for $func"
        perf probe -x $BIN "$func=$func" > /dev/null
        perf probe -x $BIN "${func}_return=$func%return" > /dev/null
    fi
done

tracy_echo "Recoding..."
if [[ VERBOSE == 1 ]]; then
    perf record -e "probe_$BASE:*" -aR $@
else
    perf record -q -e "probe_$BASE:*" -aR $@
fi

tracy_echo "Processing result..."
perf script > $CAPTURE

if [[ $SKETCH == 1 ]]; then
    process_file_sketch $CAPTURE > tracy.txt
else
    process_file $CAPTURE > tracy.txt
fi

tracy_echo "Removing probes..."
if [[ VERBOSE == 1 ]]; then
    perf probe --del "probe_$BASE:*"
else
    perf probe --del "probe_$BASE:*" > /dev/null
fi

rm $CAPTURE
rm perf.data

echo "Done"
